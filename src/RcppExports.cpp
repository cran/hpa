// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/hpa.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dnorm_parallel
NumericVector dnorm_parallel(NumericVector x, double mean, double sd, bool is_parallel);
static SEXP _hpa_dnorm_parallel_try(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_parallel(x, mean, sd, is_parallel));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_dnorm_parallel(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_dnorm_parallel_try(xSEXP, meanSEXP, sdSEXP, is_parallelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// pnorm_parallel
NumericVector pnorm_parallel(NumericVector x, double mean, double sd, bool is_parallel);
static SEXP _hpa_pnorm_parallel_try(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(pnorm_parallel(x, mean, sd, is_parallel));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_pnorm_parallel(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_pnorm_parallel_try(xSEXP, meanSEXP, sdSEXP, is_parallelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dhpa0
List dhpa0(const arma::vec x, const arma::vec pc, double mean, double sd, bool is_parallel, bool log, bool is_validation, bool is_grad);
static SEXP _hpa_dhpa0_try(SEXP xSEXP, SEXP pcSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP, SEXP is_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type pc(pcSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    Rcpp::traits::input_parameter< bool >::type is_grad(is_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(dhpa0(x, pc, mean, sd, is_parallel, log, is_validation, is_grad));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_dhpa0(SEXP xSEXP, SEXP pcSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP, SEXP is_gradSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_dhpa0_try(xSEXP, pcSEXP, meanSEXP, sdSEXP, is_parallelSEXP, logSEXP, is_validationSEXP, is_gradSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// phpa0
List phpa0(const arma::vec x, const arma::vec pc, double mean, double sd, bool is_parallel, bool log, bool is_validation, bool is_grad);
static SEXP _hpa_phpa0_try(SEXP xSEXP, SEXP pcSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP, SEXP is_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type pc(pcSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    Rcpp::traits::input_parameter< bool >::type is_grad(is_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(phpa0(x, pc, mean, sd, is_parallel, log, is_validation, is_grad));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_phpa0(SEXP xSEXP, SEXP pcSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP, SEXP is_gradSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_phpa0_try(xSEXP, pcSEXP, meanSEXP, sdSEXP, is_parallelSEXP, logSEXP, is_validationSEXP, is_gradSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// hpaBinary
List hpaBinary(Rcpp::Formula formula, DataFrame data, int K, double mean_fixed, double sd_fixed, double constant_fixed, bool coef_fixed, bool is_x0_probit, bool is_sequence, NumericVector x0, String cov_type, int boot_iter, bool is_parallel, String opt_type, List opt_control, bool is_validation);
static SEXP _hpa_hpaBinary_try(SEXP formulaSEXP, SEXP dataSEXP, SEXP KSEXP, SEXP mean_fixedSEXP, SEXP sd_fixedSEXP, SEXP constant_fixedSEXP, SEXP coef_fixedSEXP, SEXP is_x0_probitSEXP, SEXP is_sequenceSEXP, SEXP x0SEXP, SEXP cov_typeSEXP, SEXP boot_iterSEXP, SEXP is_parallelSEXP, SEXP opt_typeSEXP, SEXP opt_controlSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::Formula >::type formula(formulaSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type mean_fixed(mean_fixedSEXP);
    Rcpp::traits::input_parameter< double >::type sd_fixed(sd_fixedSEXP);
    Rcpp::traits::input_parameter< double >::type constant_fixed(constant_fixedSEXP);
    Rcpp::traits::input_parameter< bool >::type coef_fixed(coef_fixedSEXP);
    Rcpp::traits::input_parameter< bool >::type is_x0_probit(is_x0_probitSEXP);
    Rcpp::traits::input_parameter< bool >::type is_sequence(is_sequenceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< String >::type cov_type(cov_typeSEXP);
    Rcpp::traits::input_parameter< int >::type boot_iter(boot_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< String >::type opt_type(opt_typeSEXP);
    Rcpp::traits::input_parameter< List >::type opt_control(opt_controlSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(hpaBinary(formula, data, K, mean_fixed, sd_fixed, constant_fixed, coef_fixed, is_x0_probit, is_sequence, x0, cov_type, boot_iter, is_parallel, opt_type, opt_control, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_hpaBinary(SEXP formulaSEXP, SEXP dataSEXP, SEXP KSEXP, SEXP mean_fixedSEXP, SEXP sd_fixedSEXP, SEXP constant_fixedSEXP, SEXP coef_fixedSEXP, SEXP is_x0_probitSEXP, SEXP is_sequenceSEXP, SEXP x0SEXP, SEXP cov_typeSEXP, SEXP boot_iterSEXP, SEXP is_parallelSEXP, SEXP opt_typeSEXP, SEXP opt_controlSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_hpaBinary_try(formulaSEXP, dataSEXP, KSEXP, mean_fixedSEXP, sd_fixedSEXP, constant_fixedSEXP, coef_fixedSEXP, is_x0_probitSEXP, is_sequenceSEXP, x0SEXP, cov_typeSEXP, boot_iterSEXP, is_parallelSEXP, opt_typeSEXP, opt_controlSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// predict_hpaBinary
NumericVector predict_hpaBinary(List object, DataFrame newdata, bool is_prob);
static SEXP _hpa_predict_hpaBinary_try(SEXP objectSEXP, SEXP newdataSEXP, SEXP is_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< bool >::type is_prob(is_probSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_hpaBinary(object, newdata, is_prob));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_predict_hpaBinary(SEXP objectSEXP, SEXP newdataSEXP, SEXP is_probSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_predict_hpaBinary_try(objectSEXP, newdataSEXP, is_probSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// summary_hpaBinary
List summary_hpaBinary(List object);
static SEXP _hpa_summary_hpaBinary_try(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(summary_hpaBinary(object));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_summary_hpaBinary(SEXP objectSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_summary_hpaBinary_try(objectSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// print_summary_hpaBinary
void print_summary_hpaBinary(List x);
static SEXP _hpa_print_summary_hpaBinary_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    print_summary_hpaBinary(x);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_print_summary_hpaBinary(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_print_summary_hpaBinary_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// logLik_hpaBinary
double logLik_hpaBinary(List object);
static SEXP _hpa_logLik_hpaBinary_try(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(logLik_hpaBinary(object));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_logLik_hpaBinary(SEXP objectSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_logLik_hpaBinary_try(objectSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// hpaML
List hpaML(NumericVector data, NumericVector pol_degrees, NumericVector tr_left, NumericVector tr_right, NumericVector given_ind, NumericVector omit_ind, NumericVector x0, String cov_type, int boot_iter, bool is_parallel, String opt_type, List opt_control, bool is_validation);
static SEXP _hpa_hpaML_try(SEXP dataSEXP, SEXP pol_degreesSEXP, SEXP tr_leftSEXP, SEXP tr_rightSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP x0SEXP, SEXP cov_typeSEXP, SEXP boot_iterSEXP, SEXP is_parallelSEXP, SEXP opt_typeSEXP, SEXP opt_controlSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tr_left(tr_leftSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tr_right(tr_rightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type given_ind(given_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omit_ind(omit_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< String >::type cov_type(cov_typeSEXP);
    Rcpp::traits::input_parameter< int >::type boot_iter(boot_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< String >::type opt_type(opt_typeSEXP);
    Rcpp::traits::input_parameter< List >::type opt_control(opt_controlSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(hpaML(data, pol_degrees, tr_left, tr_right, given_ind, omit_ind, x0, cov_type, boot_iter, is_parallel, opt_type, opt_control, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_hpaML(SEXP dataSEXP, SEXP pol_degreesSEXP, SEXP tr_leftSEXP, SEXP tr_rightSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP x0SEXP, SEXP cov_typeSEXP, SEXP boot_iterSEXP, SEXP is_parallelSEXP, SEXP opt_typeSEXP, SEXP opt_controlSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_hpaML_try(dataSEXP, pol_degreesSEXP, tr_leftSEXP, tr_rightSEXP, given_indSEXP, omit_indSEXP, x0SEXP, cov_typeSEXP, boot_iterSEXP, is_parallelSEXP, opt_typeSEXP, opt_controlSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// predict_hpaML
NumericVector predict_hpaML(List object, NumericMatrix newdata);
static SEXP _hpa_predict_hpaML_try(SEXP objectSEXP, SEXP newdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type newdata(newdataSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_hpaML(object, newdata));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_predict_hpaML(SEXP objectSEXP, SEXP newdataSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_predict_hpaML_try(objectSEXP, newdataSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// summary_hpaML
List summary_hpaML(List object);
static SEXP _hpa_summary_hpaML_try(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(summary_hpaML(object));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_summary_hpaML(SEXP objectSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_summary_hpaML_try(objectSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// print_summary_hpaML
void print_summary_hpaML(List x);
static SEXP _hpa_print_summary_hpaML_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    print_summary_hpaML(x);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_print_summary_hpaML(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_print_summary_hpaML_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// logLik_hpaML
double logLik_hpaML(List object);
static SEXP _hpa_logLik_hpaML_try(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(logLik_hpaML(object));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_logLik_hpaML(SEXP objectSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_logLik_hpaML_try(objectSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mecdf
NumericVector mecdf(NumericMatrix x);
static SEXP _hpa_mecdf_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mecdf(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_mecdf(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_mecdf_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// hpaMain
List hpaMain(NumericVector x_lower_vec, NumericVector x_upper_vec, NumericVector pol_coefficients, NumericVector pol_degrees, String type, NumericVector given_ind, NumericVector omit_ind, NumericVector mean, NumericVector sd, NumericVector expectation_powers, String grad_type, bool is_parallel, bool is_cdf, bool log, bool is_validation);
static SEXP _hpa_hpaMain_try(SEXP x_lower_vecSEXP, SEXP x_upper_vecSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP typeSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP expectation_powersSEXP, SEXP grad_typeSEXP, SEXP is_parallelSEXP, SEXP is_cdfSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_lower_vec(x_lower_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_upper_vec(x_upper_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type given_ind(given_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omit_ind(omit_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expectation_powers(expectation_powersSEXP);
    Rcpp::traits::input_parameter< String >::type grad_type(grad_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type is_cdf(is_cdfSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(hpaMain(x_lower_vec, x_upper_vec, pol_coefficients, pol_degrees, type, given_ind, omit_ind, mean, sd, expectation_powers, grad_type, is_parallel, is_cdf, log, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_hpaMain(SEXP x_lower_vecSEXP, SEXP x_upper_vecSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP typeSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP expectation_powersSEXP, SEXP grad_typeSEXP, SEXP is_parallelSEXP, SEXP is_cdfSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_hpaMain_try(x_lower_vecSEXP, x_upper_vecSEXP, pol_coefficientsSEXP, pol_degreesSEXP, typeSEXP, given_indSEXP, omit_indSEXP, meanSEXP, sdSEXP, expectation_powersSEXP, grad_typeSEXP, is_parallelSEXP, is_cdfSEXP, logSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dhpa
NumericVector dhpa(NumericVector x, NumericVector pol_coefficients, NumericVector pol_degrees, NumericVector given_ind, NumericVector omit_ind, NumericVector mean, NumericVector sd, bool is_parallel, bool log, bool is_validation);
static SEXP _hpa_dhpa_try(SEXP xSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type given_ind(given_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omit_ind(omit_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(dhpa(x, pol_coefficients, pol_degrees, given_ind, omit_ind, mean, sd, is_parallel, log, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_dhpa(SEXP xSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_dhpa_try(xSEXP, pol_coefficientsSEXP, pol_degreesSEXP, given_indSEXP, omit_indSEXP, meanSEXP, sdSEXP, is_parallelSEXP, logSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// phpa
NumericVector phpa(NumericVector x, NumericVector pol_coefficients, NumericVector pol_degrees, NumericVector given_ind, NumericVector omit_ind, NumericVector mean, NumericVector sd, bool is_parallel, bool log, bool is_validation);
static SEXP _hpa_phpa_try(SEXP xSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type given_ind(given_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omit_ind(omit_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(phpa(x, pol_coefficients, pol_degrees, given_ind, omit_ind, mean, sd, is_parallel, log, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_phpa(SEXP xSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_phpa_try(xSEXP, pol_coefficientsSEXP, pol_degreesSEXP, given_indSEXP, omit_indSEXP, meanSEXP, sdSEXP, is_parallelSEXP, logSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ihpa
NumericVector ihpa(NumericVector x_lower, NumericVector x_upper, NumericVector pol_coefficients, NumericVector pol_degrees, NumericVector given_ind, NumericVector omit_ind, NumericVector mean, NumericVector sd, bool is_parallel, bool log, bool is_validation);
static SEXP _hpa_ihpa_try(SEXP x_lowerSEXP, SEXP x_upperSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_lower(x_lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_upper(x_upperSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type given_ind(given_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omit_ind(omit_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(ihpa(x_lower, x_upper, pol_coefficients, pol_degrees, given_ind, omit_ind, mean, sd, is_parallel, log, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_ihpa(SEXP x_lowerSEXP, SEXP x_upperSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_ihpa_try(x_lowerSEXP, x_upperSEXP, pol_coefficientsSEXP, pol_degreesSEXP, given_indSEXP, omit_indSEXP, meanSEXP, sdSEXP, is_parallelSEXP, logSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ehpa
NumericVector ehpa(NumericVector x, NumericVector pol_coefficients, NumericVector pol_degrees, NumericVector given_ind, NumericVector omit_ind, NumericVector mean, NumericVector sd, NumericVector expectation_powers, bool is_parallel, bool is_validation);
static SEXP _hpa_ehpa_try(SEXP xSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP expectation_powersSEXP, SEXP is_parallelSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type given_ind(given_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omit_ind(omit_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expectation_powers(expectation_powersSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(ehpa(x, pol_coefficients, pol_degrees, given_ind, omit_ind, mean, sd, expectation_powers, is_parallel, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_ehpa(SEXP xSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP expectation_powersSEXP, SEXP is_parallelSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_ehpa_try(xSEXP, pol_coefficientsSEXP, pol_degreesSEXP, given_indSEXP, omit_indSEXP, meanSEXP, sdSEXP, expectation_powersSEXP, is_parallelSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// etrhpa
NumericVector etrhpa(NumericVector tr_left, NumericVector tr_right, NumericVector pol_coefficients, NumericVector pol_degrees, NumericVector mean, NumericVector sd, NumericVector expectation_powers, bool is_parallel, bool is_validation);
static SEXP _hpa_etrhpa_try(SEXP tr_leftSEXP, SEXP tr_rightSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP expectation_powersSEXP, SEXP is_parallelSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tr_left(tr_leftSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tr_right(tr_rightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expectation_powers(expectation_powersSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(etrhpa(tr_left, tr_right, pol_coefficients, pol_degrees, mean, sd, expectation_powers, is_parallel, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_etrhpa(SEXP tr_leftSEXP, SEXP tr_rightSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP expectation_powersSEXP, SEXP is_parallelSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_etrhpa_try(tr_leftSEXP, tr_rightSEXP, pol_coefficientsSEXP, pol_degreesSEXP, meanSEXP, sdSEXP, expectation_powersSEXP, is_parallelSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dtrhpa
NumericVector dtrhpa(NumericVector x, NumericVector tr_left, NumericVector tr_right, NumericVector pol_coefficients, NumericVector pol_degrees, NumericVector given_ind, NumericVector omit_ind, NumericVector mean, NumericVector sd, bool is_parallel, bool log, bool is_validation);
static SEXP _hpa_dtrhpa_try(SEXP xSEXP, SEXP tr_leftSEXP, SEXP tr_rightSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tr_left(tr_leftSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tr_right(tr_rightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type given_ind(given_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omit_ind(omit_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(dtrhpa(x, tr_left, tr_right, pol_coefficients, pol_degrees, given_ind, omit_ind, mean, sd, is_parallel, log, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_dtrhpa(SEXP xSEXP, SEXP tr_leftSEXP, SEXP tr_rightSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_dtrhpa_try(xSEXP, tr_leftSEXP, tr_rightSEXP, pol_coefficientsSEXP, pol_degreesSEXP, given_indSEXP, omit_indSEXP, meanSEXP, sdSEXP, is_parallelSEXP, logSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// itrhpa
NumericVector itrhpa(NumericVector x_lower, NumericVector x_upper, NumericVector tr_left, NumericVector tr_right, NumericVector pol_coefficients, NumericVector pol_degrees, NumericVector given_ind, NumericVector omit_ind, NumericVector mean, NumericVector sd, bool is_parallel, bool log, bool is_validation);
static SEXP _hpa_itrhpa_try(SEXP x_lowerSEXP, SEXP x_upperSEXP, SEXP tr_leftSEXP, SEXP tr_rightSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_lower(x_lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_upper(x_upperSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tr_left(tr_leftSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tr_right(tr_rightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type given_ind(given_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omit_ind(omit_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(itrhpa(x_lower, x_upper, tr_left, tr_right, pol_coefficients, pol_degrees, given_ind, omit_ind, mean, sd, is_parallel, log, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_itrhpa(SEXP x_lowerSEXP, SEXP x_upperSEXP, SEXP tr_leftSEXP, SEXP tr_rightSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_itrhpa_try(x_lowerSEXP, x_upperSEXP, tr_leftSEXP, tr_rightSEXP, pol_coefficientsSEXP, pol_degreesSEXP, given_indSEXP, omit_indSEXP, meanSEXP, sdSEXP, is_parallelSEXP, logSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dhpaDiff
NumericMatrix dhpaDiff(NumericVector x, NumericVector pol_coefficients, NumericVector pol_degrees, NumericVector given_ind, NumericVector omit_ind, NumericVector mean, NumericVector sd, String type, bool is_parallel, bool log, bool is_validation);
static SEXP _hpa_dhpaDiff_try(SEXP xSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP typeSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type given_ind(given_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omit_ind(omit_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(dhpaDiff(x, pol_coefficients, pol_degrees, given_ind, omit_ind, mean, sd, type, is_parallel, log, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_dhpaDiff(SEXP xSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP typeSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_dhpaDiff_try(xSEXP, pol_coefficientsSEXP, pol_degreesSEXP, given_indSEXP, omit_indSEXP, meanSEXP, sdSEXP, typeSEXP, is_parallelSEXP, logSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ehpaDiff
NumericMatrix ehpaDiff(NumericVector x, NumericVector pol_coefficients, NumericVector pol_degrees, NumericVector given_ind, NumericVector omit_ind, NumericVector mean, NumericVector sd, NumericVector expectation_powers, String type, bool is_parallel, bool log, bool is_validation);
static SEXP _hpa_ehpaDiff_try(SEXP xSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP expectation_powersSEXP, SEXP typeSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type given_ind(given_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omit_ind(omit_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expectation_powers(expectation_powersSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(ehpaDiff(x, pol_coefficients, pol_degrees, given_ind, omit_ind, mean, sd, expectation_powers, type, is_parallel, log, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_ehpaDiff(SEXP xSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP expectation_powersSEXP, SEXP typeSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_ehpaDiff_try(xSEXP, pol_coefficientsSEXP, pol_degreesSEXP, given_indSEXP, omit_indSEXP, meanSEXP, sdSEXP, expectation_powersSEXP, typeSEXP, is_parallelSEXP, logSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ihpaDiff
NumericMatrix ihpaDiff(NumericVector x_lower, NumericVector x_upper, NumericVector pol_coefficients, NumericVector pol_degrees, NumericVector given_ind, NumericVector omit_ind, NumericVector mean, NumericVector sd, String type, bool is_parallel, bool log, bool is_validation);
static SEXP _hpa_ihpaDiff_try(SEXP x_lowerSEXP, SEXP x_upperSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP typeSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_lower(x_lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_upper(x_upperSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type given_ind(given_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omit_ind(omit_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(ihpaDiff(x_lower, x_upper, pol_coefficients, pol_degrees, given_ind, omit_ind, mean, sd, type, is_parallel, log, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_ihpaDiff(SEXP x_lowerSEXP, SEXP x_upperSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP typeSEXP, SEXP is_parallelSEXP, SEXP logSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_ihpaDiff_try(x_lowerSEXP, x_upperSEXP, pol_coefficientsSEXP, pol_degreesSEXP, given_indSEXP, omit_indSEXP, meanSEXP, sdSEXP, typeSEXP, is_parallelSEXP, logSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// qhpa
NumericVector qhpa(NumericVector p, NumericMatrix x, NumericVector pol_coefficients, NumericVector pol_degrees, NumericVector given_ind, NumericVector omit_ind, NumericVector mean, NumericVector sd);
static SEXP _hpa_qhpa_try(SEXP pSEXP, SEXP xSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type given_ind(given_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omit_ind(omit_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(qhpa(p, x, pol_coefficients, pol_degrees, given_ind, omit_ind, mean, sd));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_qhpa(SEXP pSEXP, SEXP xSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP given_indSEXP, SEXP omit_indSEXP, SEXP meanSEXP, SEXP sdSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_qhpa_try(pSEXP, xSEXP, pol_coefficientsSEXP, pol_degreesSEXP, given_indSEXP, omit_indSEXP, meanSEXP, sdSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rhpa
NumericMatrix rhpa(int n, NumericVector pol_coefficients, NumericVector pol_degrees, NumericVector mean, NumericVector sd);
static SEXP _hpa_rhpa_try(SEXP nSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(rhpa(n, pol_coefficients, pol_degrees, mean, sd));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_rhpa(SEXP nSEXP, SEXP pol_coefficientsSEXP, SEXP pol_degreesSEXP, SEXP meanSEXP, SEXP sdSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_rhpa_try(nSEXP, pol_coefficientsSEXP, pol_degreesSEXP, meanSEXP, sdSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// hpaSelection
Rcpp::List hpaSelection(Rcpp::Formula selection, Rcpp::Formula outcome, DataFrame data, int selection_K, int outcome_K, int pol_elements, bool is_Newey, NumericVector x0, bool is_Newey_loocv, String cov_type, int boot_iter, bool is_parallel, String opt_type, List opt_control, bool is_validation);
static SEXP _hpa_hpaSelection_try(SEXP selectionSEXP, SEXP outcomeSEXP, SEXP dataSEXP, SEXP selection_KSEXP, SEXP outcome_KSEXP, SEXP pol_elementsSEXP, SEXP is_NeweySEXP, SEXP x0SEXP, SEXP is_Newey_loocvSEXP, SEXP cov_typeSEXP, SEXP boot_iterSEXP, SEXP is_parallelSEXP, SEXP opt_typeSEXP, SEXP opt_controlSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::Formula >::type selection(selectionSEXP);
    Rcpp::traits::input_parameter< Rcpp::Formula >::type outcome(outcomeSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type selection_K(selection_KSEXP);
    Rcpp::traits::input_parameter< int >::type outcome_K(outcome_KSEXP);
    Rcpp::traits::input_parameter< int >::type pol_elements(pol_elementsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_Newey(is_NeweySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< bool >::type is_Newey_loocv(is_Newey_loocvSEXP);
    Rcpp::traits::input_parameter< String >::type cov_type(cov_typeSEXP);
    Rcpp::traits::input_parameter< int >::type boot_iter(boot_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< String >::type opt_type(opt_typeSEXP);
    Rcpp::traits::input_parameter< List >::type opt_control(opt_controlSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(hpaSelection(selection, outcome, data, selection_K, outcome_K, pol_elements, is_Newey, x0, is_Newey_loocv, cov_type, boot_iter, is_parallel, opt_type, opt_control, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_hpaSelection(SEXP selectionSEXP, SEXP outcomeSEXP, SEXP dataSEXP, SEXP selection_KSEXP, SEXP outcome_KSEXP, SEXP pol_elementsSEXP, SEXP is_NeweySEXP, SEXP x0SEXP, SEXP is_Newey_loocvSEXP, SEXP cov_typeSEXP, SEXP boot_iterSEXP, SEXP is_parallelSEXP, SEXP opt_typeSEXP, SEXP opt_controlSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_hpaSelection_try(selectionSEXP, outcomeSEXP, dataSEXP, selection_KSEXP, outcome_KSEXP, pol_elementsSEXP, is_NeweySEXP, x0SEXP, is_Newey_loocvSEXP, cov_typeSEXP, boot_iterSEXP, is_parallelSEXP, opt_typeSEXP, opt_controlSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// predict_hpaSelection
List predict_hpaSelection(List object, DataFrame newdata, std::string method, bool is_cond, bool is_outcome);
static SEXP _hpa_predict_hpaSelection_try(SEXP objectSEXP, SEXP newdataSEXP, SEXP methodSEXP, SEXP is_condSEXP, SEXP is_outcomeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type is_cond(is_condSEXP);
    Rcpp::traits::input_parameter< bool >::type is_outcome(is_outcomeSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_hpaSelection(object, newdata, method, is_cond, is_outcome));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_predict_hpaSelection(SEXP objectSEXP, SEXP newdataSEXP, SEXP methodSEXP, SEXP is_condSEXP, SEXP is_outcomeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_predict_hpaSelection_try(objectSEXP, newdataSEXP, methodSEXP, is_condSEXP, is_outcomeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// summary_hpaSelection
List summary_hpaSelection(List object);
static SEXP _hpa_summary_hpaSelection_try(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(summary_hpaSelection(object));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_summary_hpaSelection(SEXP objectSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_summary_hpaSelection_try(objectSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// print_summary_hpaSelection
void print_summary_hpaSelection(List x);
static SEXP _hpa_print_summary_hpaSelection_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    print_summary_hpaSelection(x);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_print_summary_hpaSelection(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_print_summary_hpaSelection_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// logLik_hpaSelection
double logLik_hpaSelection(List object);
static SEXP _hpa_logLik_hpaSelection_try(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(logLik_hpaSelection(object));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_logLik_hpaSelection(SEXP objectSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_logLik_hpaSelection_try(objectSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// normalMoment
NumericVector normalMoment(int k, double mean, double sd, bool return_all_moments, bool is_validation, bool is_central, String diff_type);
static SEXP _hpa_normalMoment_try(SEXP kSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP return_all_momentsSEXP, SEXP is_validationSEXP, SEXP is_centralSEXP, SEXP diff_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type return_all_moments(return_all_momentsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    Rcpp::traits::input_parameter< bool >::type is_central(is_centralSEXP);
    Rcpp::traits::input_parameter< String >::type diff_type(diff_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(normalMoment(k, mean, sd, return_all_moments, is_validation, is_central, diff_type));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_normalMoment(SEXP kSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP return_all_momentsSEXP, SEXP is_validationSEXP, SEXP is_centralSEXP, SEXP diff_typeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_normalMoment_try(kSEXP, meanSEXP, sdSEXP, return_all_momentsSEXP, is_validationSEXP, is_centralSEXP, diff_typeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// truncatedNormalMoment
NumericMatrix truncatedNormalMoment(int k, NumericVector x_lower, NumericVector x_upper, double mean, double sd, NumericVector pdf_lower, NumericVector cdf_lower, NumericVector pdf_upper, NumericVector cdf_upper, NumericVector cdf_difference, bool return_all_moments, bool is_validation, bool is_parallel, String diff_type);
static SEXP _hpa_truncatedNormalMoment_try(SEXP kSEXP, SEXP x_lowerSEXP, SEXP x_upperSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP pdf_lowerSEXP, SEXP cdf_lowerSEXP, SEXP pdf_upperSEXP, SEXP cdf_upperSEXP, SEXP cdf_differenceSEXP, SEXP return_all_momentsSEXP, SEXP is_validationSEXP, SEXP is_parallelSEXP, SEXP diff_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_lower(x_lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_upper(x_upperSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pdf_lower(pdf_lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cdf_lower(cdf_lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pdf_upper(pdf_upperSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cdf_upper(cdf_upperSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cdf_difference(cdf_differenceSEXP);
    Rcpp::traits::input_parameter< bool >::type return_all_moments(return_all_momentsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    Rcpp::traits::input_parameter< bool >::type is_parallel(is_parallelSEXP);
    Rcpp::traits::input_parameter< String >::type diff_type(diff_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(truncatedNormalMoment(k, x_lower, x_upper, mean, sd, pdf_lower, cdf_lower, pdf_upper, cdf_upper, cdf_difference, return_all_moments, is_validation, is_parallel, diff_type));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_truncatedNormalMoment(SEXP kSEXP, SEXP x_lowerSEXP, SEXP x_upperSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP pdf_lowerSEXP, SEXP cdf_lowerSEXP, SEXP pdf_upperSEXP, SEXP cdf_upperSEXP, SEXP cdf_differenceSEXP, SEXP return_all_momentsSEXP, SEXP is_validationSEXP, SEXP is_parallelSEXP, SEXP diff_typeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_truncatedNormalMoment_try(kSEXP, x_lowerSEXP, x_upperSEXP, meanSEXP, sdSEXP, pdf_lowerSEXP, cdf_lowerSEXP, pdf_upperSEXP, cdf_upperSEXP, cdf_differenceSEXP, return_all_momentsSEXP, is_validationSEXP, is_parallelSEXP, diff_typeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// polynomialIndex
NumericMatrix polynomialIndex(NumericVector pol_degrees, bool is_validation);
static SEXP _hpa_polynomialIndex_try(SEXP pol_degreesSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(polynomialIndex(pol_degrees, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_polynomialIndex(SEXP pol_degreesSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_polynomialIndex_try(pol_degreesSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// printPolynomial
Rcpp::String printPolynomial(NumericVector pol_degrees, NumericVector pol_coefficients, bool is_validation);
static SEXP _hpa_printPolynomial_try(SEXP pol_degreesSEXP, SEXP pol_coefficientsSEXP, SEXP is_validationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pol_degrees(pol_degreesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pol_coefficients(pol_coefficientsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_validation(is_validationSEXP);
    rcpp_result_gen = Rcpp::wrap(printPolynomial(pol_degrees, pol_coefficients, is_validation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_printPolynomial(SEXP pol_degreesSEXP, SEXP pol_coefficientsSEXP, SEXP is_validationSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hpa_printPolynomial_try(pol_degreesSEXP, pol_coefficientsSEXP, is_validationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bsplineMult
List bsplineMult(List b, double t1, double t2, bool is_left);
static SEXP _hpa_bsplineMult_try(SEXP bSEXP, SEXP t1SEXP, SEXP t2SEXP, SEXP is_leftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< bool >::type is_left(is_leftSEXP);
    rcpp_result_gen = Rcpp::wrap(bsplineMult(b, t1, t2, is_left));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_bsplineMult(SEXP bSEXP, SEXP t1SEXP, SEXP t2SEXP, SEXP is_leftSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_bsplineMult_try(bSEXP, t1SEXP, t2SEXP, is_leftSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bsplineMerge
List bsplineMerge(List b_left, List b_right);
static SEXP _hpa_bsplineMerge_try(SEXP b_leftSEXP, SEXP b_rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type b_left(b_leftSEXP);
    Rcpp::traits::input_parameter< List >::type b_right(b_rightSEXP);
    rcpp_result_gen = Rcpp::wrap(bsplineMerge(b_left, b_right));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_bsplineMerge(SEXP b_leftSEXP, SEXP b_rightSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_bsplineMerge_try(b_leftSEXP, b_rightSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bsplineNames
List bsplineNames(List b);
static SEXP _hpa_bsplineNames_try(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(bsplineNames(b));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_bsplineNames(SEXP bSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_bsplineNames_try(bSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bsplineGenerate
List bsplineGenerate(NumericVector knots, int degree, bool is_names);
static SEXP _hpa_bsplineGenerate_try(SEXP knotsSEXP, SEXP degreeSEXP, SEXP is_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< bool >::type is_names(is_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(bsplineGenerate(knots, degree, is_names));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_bsplineGenerate(SEXP knotsSEXP, SEXP degreeSEXP, SEXP is_namesSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_bsplineGenerate_try(knotsSEXP, degreeSEXP, is_namesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bsplineEstimate
NumericVector bsplineEstimate(NumericVector x, NumericMatrix m, NumericVector knots);
static SEXP _hpa_bsplineEstimate_try(SEXP xSEXP, SEXP mSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(bsplineEstimate(x, m, knots));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_bsplineEstimate(SEXP xSEXP, SEXP mSEXP, SEXP knotsSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_bsplineEstimate_try(xSEXP, mSEXP, knotsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bsplineComb
List bsplineComb(List splines, NumericVector weights);
static SEXP _hpa_bsplineComb_try(SEXP splinesSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type splines(splinesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(bsplineComb(splines, weights));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_bsplineComb(SEXP splinesSEXP, SEXP weightsSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_bsplineComb_try(splinesSEXP, weightsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dhsa
NumericVector dhsa(NumericVector x, NumericMatrix m, NumericVector knots, double mean, double sd, bool log);
static SEXP _hpa_dhsa_try(SEXP xSEXP, SEXP mSEXP, SEXP knotsSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dhsa(x, m, knots, mean, sd, log));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_dhsa(SEXP xSEXP, SEXP mSEXP, SEXP knotsSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP logSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_dhsa_try(xSEXP, mSEXP, knotsSEXP, meanSEXP, sdSEXP, logSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ehsa
double ehsa(NumericMatrix m, NumericVector knots, double mean, double sd, double power);
static SEXP _hpa_ehsa_try(SEXP mSEXP, SEXP knotsSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(ehsa(m, knots, mean, sd, power));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hpa_ehsa(SEXP mSEXP, SEXP knotsSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP powerSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_hpa_ehsa_try(mSEXP, knotsSEXP, meanSEXP, sdSEXP, powerSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _hpa_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("NumericVector(*dnorm_parallel)(NumericVector,double,double,bool)");
        signatures.insert("NumericVector(*pnorm_parallel)(NumericVector,double,double,bool)");
        signatures.insert("List(*dhpa0)(const arma::vec,const arma::vec,double,double,bool,bool,bool,bool)");
        signatures.insert("List(*phpa0)(const arma::vec,const arma::vec,double,double,bool,bool,bool,bool)");
        signatures.insert("List(*hpaBinary)(Rcpp::Formula,DataFrame,int,double,double,double,bool,bool,bool,NumericVector,String,int,bool,String,List,bool)");
        signatures.insert("NumericVector(*predict_hpaBinary)(List,DataFrame,bool)");
        signatures.insert("List(*summary_hpaBinary)(List)");
        signatures.insert("void(*print_summary_hpaBinary)(List)");
        signatures.insert("double(*logLik_hpaBinary)(List)");
        signatures.insert("List(*hpaML)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,String,int,bool,String,List,bool)");
        signatures.insert("NumericVector(*predict_hpaML)(List,NumericMatrix)");
        signatures.insert("List(*summary_hpaML)(List)");
        signatures.insert("void(*print_summary_hpaML)(List)");
        signatures.insert("double(*logLik_hpaML)(List)");
        signatures.insert("NumericVector(*mecdf)(NumericMatrix)");
        signatures.insert("List(*hpaMain)(NumericVector,NumericVector,NumericVector,NumericVector,String,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,String,bool,bool,bool,bool)");
        signatures.insert("NumericVector(*dhpa)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,bool,bool,bool)");
        signatures.insert("NumericVector(*phpa)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,bool,bool,bool)");
        signatures.insert("NumericVector(*ihpa)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,bool,bool,bool)");
        signatures.insert("NumericVector(*ehpa)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,bool,bool)");
        signatures.insert("NumericVector(*etrhpa)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,bool,bool)");
        signatures.insert("NumericVector(*dtrhpa)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,bool,bool,bool)");
        signatures.insert("NumericVector(*itrhpa)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,bool,bool,bool)");
        signatures.insert("NumericMatrix(*dhpaDiff)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,String,bool,bool,bool)");
        signatures.insert("NumericMatrix(*ehpaDiff)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,String,bool,bool,bool)");
        signatures.insert("NumericMatrix(*ihpaDiff)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,String,bool,bool,bool)");
        signatures.insert("NumericVector(*qhpa)(NumericVector,NumericMatrix,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericMatrix(*rhpa)(int,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("Rcpp::List(*hpaSelection)(Rcpp::Formula,Rcpp::Formula,DataFrame,int,int,int,bool,NumericVector,bool,String,int,bool,String,List,bool)");
        signatures.insert("List(*predict_hpaSelection)(List,DataFrame,std::string,bool,bool)");
        signatures.insert("List(*summary_hpaSelection)(List)");
        signatures.insert("void(*print_summary_hpaSelection)(List)");
        signatures.insert("double(*logLik_hpaSelection)(List)");
        signatures.insert("NumericVector(*normalMoment)(int,double,double,bool,bool,bool,String)");
        signatures.insert("NumericMatrix(*truncatedNormalMoment)(int,NumericVector,NumericVector,double,double,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,bool,bool,bool,String)");
        signatures.insert("NumericMatrix(*polynomialIndex)(NumericVector,bool)");
        signatures.insert("Rcpp::String(*printPolynomial)(NumericVector,NumericVector,bool)");
        signatures.insert("List(*bsplineMult)(List,double,double,bool)");
        signatures.insert("List(*bsplineMerge)(List,List)");
        signatures.insert("List(*bsplineNames)(List)");
        signatures.insert("List(*bsplineGenerate)(NumericVector,int,bool)");
        signatures.insert("NumericVector(*bsplineEstimate)(NumericVector,NumericMatrix,NumericVector)");
        signatures.insert("List(*bsplineComb)(List,NumericVector)");
        signatures.insert("NumericVector(*dhsa)(NumericVector,NumericMatrix,NumericVector,double,double,bool)");
        signatures.insert("double(*ehsa)(NumericMatrix,NumericVector,double,double,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _hpa_RcppExport_registerCCallable() { 
    R_RegisterCCallable("hpa", "_hpa_dnorm_parallel", (DL_FUNC)_hpa_dnorm_parallel_try);
    R_RegisterCCallable("hpa", "_hpa_pnorm_parallel", (DL_FUNC)_hpa_pnorm_parallel_try);
    R_RegisterCCallable("hpa", "_hpa_dhpa0", (DL_FUNC)_hpa_dhpa0_try);
    R_RegisterCCallable("hpa", "_hpa_phpa0", (DL_FUNC)_hpa_phpa0_try);
    R_RegisterCCallable("hpa", "_hpa_hpaBinary", (DL_FUNC)_hpa_hpaBinary_try);
    R_RegisterCCallable("hpa", "_hpa_predict_hpaBinary", (DL_FUNC)_hpa_predict_hpaBinary_try);
    R_RegisterCCallable("hpa", "_hpa_summary_hpaBinary", (DL_FUNC)_hpa_summary_hpaBinary_try);
    R_RegisterCCallable("hpa", "_hpa_print_summary_hpaBinary", (DL_FUNC)_hpa_print_summary_hpaBinary_try);
    R_RegisterCCallable("hpa", "_hpa_logLik_hpaBinary", (DL_FUNC)_hpa_logLik_hpaBinary_try);
    R_RegisterCCallable("hpa", "_hpa_hpaML", (DL_FUNC)_hpa_hpaML_try);
    R_RegisterCCallable("hpa", "_hpa_predict_hpaML", (DL_FUNC)_hpa_predict_hpaML_try);
    R_RegisterCCallable("hpa", "_hpa_summary_hpaML", (DL_FUNC)_hpa_summary_hpaML_try);
    R_RegisterCCallable("hpa", "_hpa_print_summary_hpaML", (DL_FUNC)_hpa_print_summary_hpaML_try);
    R_RegisterCCallable("hpa", "_hpa_logLik_hpaML", (DL_FUNC)_hpa_logLik_hpaML_try);
    R_RegisterCCallable("hpa", "_hpa_mecdf", (DL_FUNC)_hpa_mecdf_try);
    R_RegisterCCallable("hpa", "_hpa_hpaMain", (DL_FUNC)_hpa_hpaMain_try);
    R_RegisterCCallable("hpa", "_hpa_dhpa", (DL_FUNC)_hpa_dhpa_try);
    R_RegisterCCallable("hpa", "_hpa_phpa", (DL_FUNC)_hpa_phpa_try);
    R_RegisterCCallable("hpa", "_hpa_ihpa", (DL_FUNC)_hpa_ihpa_try);
    R_RegisterCCallable("hpa", "_hpa_ehpa", (DL_FUNC)_hpa_ehpa_try);
    R_RegisterCCallable("hpa", "_hpa_etrhpa", (DL_FUNC)_hpa_etrhpa_try);
    R_RegisterCCallable("hpa", "_hpa_dtrhpa", (DL_FUNC)_hpa_dtrhpa_try);
    R_RegisterCCallable("hpa", "_hpa_itrhpa", (DL_FUNC)_hpa_itrhpa_try);
    R_RegisterCCallable("hpa", "_hpa_dhpaDiff", (DL_FUNC)_hpa_dhpaDiff_try);
    R_RegisterCCallable("hpa", "_hpa_ehpaDiff", (DL_FUNC)_hpa_ehpaDiff_try);
    R_RegisterCCallable("hpa", "_hpa_ihpaDiff", (DL_FUNC)_hpa_ihpaDiff_try);
    R_RegisterCCallable("hpa", "_hpa_qhpa", (DL_FUNC)_hpa_qhpa_try);
    R_RegisterCCallable("hpa", "_hpa_rhpa", (DL_FUNC)_hpa_rhpa_try);
    R_RegisterCCallable("hpa", "_hpa_hpaSelection", (DL_FUNC)_hpa_hpaSelection_try);
    R_RegisterCCallable("hpa", "_hpa_predict_hpaSelection", (DL_FUNC)_hpa_predict_hpaSelection_try);
    R_RegisterCCallable("hpa", "_hpa_summary_hpaSelection", (DL_FUNC)_hpa_summary_hpaSelection_try);
    R_RegisterCCallable("hpa", "_hpa_print_summary_hpaSelection", (DL_FUNC)_hpa_print_summary_hpaSelection_try);
    R_RegisterCCallable("hpa", "_hpa_logLik_hpaSelection", (DL_FUNC)_hpa_logLik_hpaSelection_try);
    R_RegisterCCallable("hpa", "_hpa_normalMoment", (DL_FUNC)_hpa_normalMoment_try);
    R_RegisterCCallable("hpa", "_hpa_truncatedNormalMoment", (DL_FUNC)_hpa_truncatedNormalMoment_try);
    R_RegisterCCallable("hpa", "_hpa_polynomialIndex", (DL_FUNC)_hpa_polynomialIndex_try);
    R_RegisterCCallable("hpa", "_hpa_printPolynomial", (DL_FUNC)_hpa_printPolynomial_try);
    R_RegisterCCallable("hpa", "_hpa_bsplineMult", (DL_FUNC)_hpa_bsplineMult_try);
    R_RegisterCCallable("hpa", "_hpa_bsplineMerge", (DL_FUNC)_hpa_bsplineMerge_try);
    R_RegisterCCallable("hpa", "_hpa_bsplineNames", (DL_FUNC)_hpa_bsplineNames_try);
    R_RegisterCCallable("hpa", "_hpa_bsplineGenerate", (DL_FUNC)_hpa_bsplineGenerate_try);
    R_RegisterCCallable("hpa", "_hpa_bsplineEstimate", (DL_FUNC)_hpa_bsplineEstimate_try);
    R_RegisterCCallable("hpa", "_hpa_bsplineComb", (DL_FUNC)_hpa_bsplineComb_try);
    R_RegisterCCallable("hpa", "_hpa_dhsa", (DL_FUNC)_hpa_dhsa_try);
    R_RegisterCCallable("hpa", "_hpa_ehsa", (DL_FUNC)_hpa_ehsa_try);
    R_RegisterCCallable("hpa", "_hpa_RcppExport_validate", (DL_FUNC)_hpa_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_hpa_dnorm_parallel", (DL_FUNC) &_hpa_dnorm_parallel, 4},
    {"_hpa_pnorm_parallel", (DL_FUNC) &_hpa_pnorm_parallel, 4},
    {"_hpa_dhpa0", (DL_FUNC) &_hpa_dhpa0, 8},
    {"_hpa_phpa0", (DL_FUNC) &_hpa_phpa0, 8},
    {"_hpa_hpaBinary", (DL_FUNC) &_hpa_hpaBinary, 16},
    {"_hpa_predict_hpaBinary", (DL_FUNC) &_hpa_predict_hpaBinary, 3},
    {"_hpa_summary_hpaBinary", (DL_FUNC) &_hpa_summary_hpaBinary, 1},
    {"_hpa_print_summary_hpaBinary", (DL_FUNC) &_hpa_print_summary_hpaBinary, 1},
    {"_hpa_logLik_hpaBinary", (DL_FUNC) &_hpa_logLik_hpaBinary, 1},
    {"_hpa_hpaML", (DL_FUNC) &_hpa_hpaML, 13},
    {"_hpa_predict_hpaML", (DL_FUNC) &_hpa_predict_hpaML, 2},
    {"_hpa_summary_hpaML", (DL_FUNC) &_hpa_summary_hpaML, 1},
    {"_hpa_print_summary_hpaML", (DL_FUNC) &_hpa_print_summary_hpaML, 1},
    {"_hpa_logLik_hpaML", (DL_FUNC) &_hpa_logLik_hpaML, 1},
    {"_hpa_mecdf", (DL_FUNC) &_hpa_mecdf, 1},
    {"_hpa_hpaMain", (DL_FUNC) &_hpa_hpaMain, 15},
    {"_hpa_dhpa", (DL_FUNC) &_hpa_dhpa, 10},
    {"_hpa_phpa", (DL_FUNC) &_hpa_phpa, 10},
    {"_hpa_ihpa", (DL_FUNC) &_hpa_ihpa, 11},
    {"_hpa_ehpa", (DL_FUNC) &_hpa_ehpa, 10},
    {"_hpa_etrhpa", (DL_FUNC) &_hpa_etrhpa, 9},
    {"_hpa_dtrhpa", (DL_FUNC) &_hpa_dtrhpa, 12},
    {"_hpa_itrhpa", (DL_FUNC) &_hpa_itrhpa, 13},
    {"_hpa_dhpaDiff", (DL_FUNC) &_hpa_dhpaDiff, 11},
    {"_hpa_ehpaDiff", (DL_FUNC) &_hpa_ehpaDiff, 12},
    {"_hpa_ihpaDiff", (DL_FUNC) &_hpa_ihpaDiff, 12},
    {"_hpa_qhpa", (DL_FUNC) &_hpa_qhpa, 8},
    {"_hpa_rhpa", (DL_FUNC) &_hpa_rhpa, 5},
    {"_hpa_hpaSelection", (DL_FUNC) &_hpa_hpaSelection, 15},
    {"_hpa_predict_hpaSelection", (DL_FUNC) &_hpa_predict_hpaSelection, 5},
    {"_hpa_summary_hpaSelection", (DL_FUNC) &_hpa_summary_hpaSelection, 1},
    {"_hpa_print_summary_hpaSelection", (DL_FUNC) &_hpa_print_summary_hpaSelection, 1},
    {"_hpa_logLik_hpaSelection", (DL_FUNC) &_hpa_logLik_hpaSelection, 1},
    {"_hpa_normalMoment", (DL_FUNC) &_hpa_normalMoment, 7},
    {"_hpa_truncatedNormalMoment", (DL_FUNC) &_hpa_truncatedNormalMoment, 14},
    {"_hpa_polynomialIndex", (DL_FUNC) &_hpa_polynomialIndex, 2},
    {"_hpa_printPolynomial", (DL_FUNC) &_hpa_printPolynomial, 3},
    {"_hpa_bsplineMult", (DL_FUNC) &_hpa_bsplineMult, 4},
    {"_hpa_bsplineMerge", (DL_FUNC) &_hpa_bsplineMerge, 2},
    {"_hpa_bsplineNames", (DL_FUNC) &_hpa_bsplineNames, 1},
    {"_hpa_bsplineGenerate", (DL_FUNC) &_hpa_bsplineGenerate, 3},
    {"_hpa_bsplineEstimate", (DL_FUNC) &_hpa_bsplineEstimate, 3},
    {"_hpa_bsplineComb", (DL_FUNC) &_hpa_bsplineComb, 2},
    {"_hpa_dhsa", (DL_FUNC) &_hpa_dhsa, 6},
    {"_hpa_ehsa", (DL_FUNC) &_hpa_ehsa, 5},
    {"_hpa_RcppExport_registerCCallable", (DL_FUNC) &_hpa_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_hpa(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
